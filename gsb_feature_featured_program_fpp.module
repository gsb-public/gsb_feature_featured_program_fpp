<?php
/**
 * @file
 * Code for the GSB Feature Featured Program FPP feature.
 */

include_once 'gsb_feature_featured_program_fpp.features.inc';
/**
 * @file
 * Code for the GSB Feature Featured Program FPP feature.
 */

 /**
 * Implements hook_entity_alter().
 */
function gsb_feature_featured_program_fpp_entity_info_alter(&$entity_info) {

  $entity_info['fieldable_panels_pane']['bundles']['featured_program'] = array(
    'label' => t('Featured Program'),
    'pane category' => t('GSB panes'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/featured-program',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_featured_program_fpp_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' || $form_id == 'fieldable_panels_panes_entity_edit_form')
     && $form_state['entity']->bundle == 'featured_program') {
       $form['title']['#access'] = FALSE;
       $form['link']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for fieldable-panels-pane.tpl.php.
 */
function gsb_feature_featured_program_fpp_preprocess_fieldable_panels_pane(&$variables) {
  if ($variables['elements']['#bundle'] != 'featured_program') {
    return;
  }

  // Add classes based on the position and color chosen.
  try {
    $wrapper = entity_metadata_wrapper('fieldable_panels_pane', $variables['elements']['#element']);
    $variables['classes_array'][] = 'featured-program-color-' . $wrapper->field_color_overlay->value();
  }
  catch (EntityMetadataWrapperException $e) {
    // If the fields are ever missing/renamed, Entity API will throw an
    // exception instead of using watchdog.
    watchdog('gsb_feature_featured_program_fpp', 'In @function on line @line: "@message"', array('@function' => __FUNCTION__, '@line' => __LINE__, '@message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_featured_program_fpp_field_extra_fields() {

  $extra = array();
  $extra['fieldable_panels_pane']['featured_program']['display'] = array(
    'gsb_time_commitment' => array(
      'label' => t('Time Commitment'),
      'description' => t('Time Commitment'),
      'weight' => 0,
    ),
    'gsb_program_instance' => array(
      'label' => t('Program Instance'),
      'description' => t('Program Instance'),
      'weight' => 0,
    ),
  );

  return $extra;
}

/**
 * Implements hook_fieldable_panels_pane_view().
 */
function gsb_feature_featured_program_fpp_fieldable_panels_pane_view($entity, $view_mode, $langcode) {

  if ($entity->bundle != 'featured_program') {
    return;
  }

  $language = $entity->language;
  $program_node = node_load($entity->field_program[$language][0]['target_id']);
  $time_commitment_term = taxonomy_term_load($program_node->field_time_commitment[$language][0]['tid']);

  if ($program_node->field_program_detail[$language][0]['value'] == 1) {
    $title = $program_node->title;
    $url = $program_node->field_link_single[$language][0]['url'];
    $entity->content['field_program'][0]['#markup'] = l($title, $url, array('attributes' => array('target' => '_blank')));
  }
  $program_instance = _gsb_feature_program_ct_get_all_program_instances(array($program_node->nid),'featured');
  $instance_markup= '';
  if ($program_instance[0]) {
    $nid_display = node_view(node_load($program_instance[0]), 'featured_program');
    $instance_markup =  render($nid_display);
  }


  $entity->content['gsb_time_commitment'] = array(
     '#type' => 'container',
     '#attributes' => array(
       'class' => array(
          'gsb-time-commitment',
        ),
      ),
     '#children' => $time_commitment_term->name,
  );
  $entity->content['gsb_program_instance'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'gsb-program-instance',
      ),
    ),
    '#children' => $instance_markup,
  );
}